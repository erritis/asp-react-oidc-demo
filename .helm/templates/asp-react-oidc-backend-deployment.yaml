apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.werf.yml -o ./.helm/templates
    kompose.service.expose: backend.asp-react-oidc.test
    kompose.service.expose.ingress-class-name: nginx
    kompose.version: 1.27.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: asp-react-oidc-backend
  name: asp-react-oidc-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: asp-react-oidc-backend
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.werf.yml -o ./.helm/templates
        kompose.service.expose: backend.asp-react-oidc.test
        kompose.service.expose.ingress-class-name: nginx
        kompose.version: 1.27.0 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/asp-react-oidc-network: "true"
        io.kompose.service: asp-react-oidc-backend
    spec:
      containers:
        - env:
            - name: ASPNETCORE_ENVIRONMENT
              value: Development
            - name: AUDIENCE
              value: backend
            - name: AUTHORITY
              value: http://asp-react-oidc-keycloak/realms/react-example
          image: {{ .Values.werf.image.asp_react_oidc_backend }}
          livenessProbe:
            exec:
              command:
                - curl
                - -f
                - http://localhost:8080/healthcheck
            failureThreshold: 5
            initialDelaySeconds: 20
            periodSeconds: 20
            timeoutSeconds: 10
          name: asp-react-oidc-backend
          ports:
            - containerPort: 80
          resources: {}
      restartPolicy: Always
status: {}
